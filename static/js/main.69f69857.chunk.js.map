{"version":3,"sources":["components/keyboard/utils.js","components/keyboard/Styles.js","components/keyboard/NoteKey.js","components/keyboard/OctaveKeys.js","components/keyboard/SynthKeyboard.js","components/visualizer/SynthWave.js","App.js","serviceWorker.js","index.js"],"names":["whiteNotes","blackNotes","SynthContext","createContext","useKeyboardShortcuts","octave","isActive","useContext","onAttack","onRelease","activeNote","useEffect","handleKeyDown","note","key","getNote","toLowerCase","getNoteByKey","handleKeyUp","document","addEventListener","removeEventListener","KeyboardWrapper","styled","div","KeyboardWhites","KeyboardBlacks","KEY_WIDTH","SkipKey","KeyButton","black","KEY_HEIGHT","NoteKey","className","onMouseDown","onMouseEnter","onMouseUp","OctaveKeys","keyboardShortcuts","map","idx","SynthKeyboard","synth","React","useState","setActiveNote","Provider","value","triggerAttack","triggerRelease","sketch","toneWaveform","width","p","setup","createCanvas","noFill","background","draw","waveformValues","getValue","stroke","strokeWeight","beginShape","i","length","x","y","vertex","height","endShape","SynthWave","waveform","window","innerWidth","Tone","Waveform","phaser","Phaser","chain","Master","FMSynth","connect","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69f69857.chunk.js","sourcesContent":["import { createContext, useContext, useEffect } from \"react\";\r\nexport const whiteNotes = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\r\nexport const whiteNoteKeys = [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\"];\r\nexport const blackNotes = [null, \"C#\", \"D#\", null, \"F#\", \"G#\", \"A#\"];\r\n\r\nexport const SynthContext = createContext(null);\r\n\r\nexport const getNoteByKey = (key, octave = 4) => {\r\n  const getNote = () => {\r\n    switch (key.toLowerCase()) {\r\n      case \"a\":\r\n        return whiteNotes[0]; // C\r\n      case \"s\":\r\n        return whiteNotes[1]; // D\r\n      case \"d\":\r\n        return whiteNotes[2]; // E\r\n      case \"f\":\r\n        return whiteNotes[3]; // F\r\n      case \"g\":\r\n        return whiteNotes[4]; // G\r\n      case \"h\":\r\n        return whiteNotes[5]; // A\r\n      case \"j\":\r\n        return whiteNotes[6]; // B\r\n      // Black Keys\r\n      case \"w\":\r\n        return blackNotes[1]; // C#\r\n      case \"e\":\r\n        return blackNotes[2]; // D#\r\n      case \"t\":\r\n        return blackNotes[4]; // F#\r\n      case \"y\":\r\n        return blackNotes[5]; // G#\r\n      case \"u\":\r\n        return blackNotes[6]; // A#\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n  const note = getNote();\r\n\r\n  return note === null ? null : note + octave;\r\n};\r\n\r\nexport const useKeyboardShortcuts = (octave, isActive) => {\r\n  const { onAttack, onRelease, activeNote } = useContext(SynthContext);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = ({ key }) => {\r\n      const note = getNoteByKey(key, octave);\r\n      if (note && note !== activeNote) {\r\n        onAttack(note);\r\n      }\r\n    };\r\n    const handleKeyUp = () => onRelease();\r\n\r\n    if (isActive) {\r\n      document.addEventListener(\"keydown\", handleKeyDown);\r\n      document.addEventListener(\"keyup\", handleKeyUp);\r\n    }\r\n\r\n    return () => {\r\n      if (isActive) {\r\n        document.removeEventListener(\"keydown\", handleKeyDown);\r\n        document.removeEventListener(\"keyup\", handleKeyUp);\r\n      }\r\n    };\r\n  }, [activeNote, isActive, onAttack, onRelease, octave]);\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nconst KEY_WIDTH = 60;\r\nconst KEY_HEIGHT = 240;\r\n\r\nexport const KeyboardWrapper = styled.div`\r\n  position: relative;\r\n  display: inline-block;\r\n`;\r\n\r\nexport const KeyboardWhites = styled.div`\r\n  position: relative;\r\n  display: inline-block;\r\n`;\r\n\r\nexport const KeyboardBlacks = styled.div`\r\n  position: absolute;\r\n  display: inline-block;\r\n  left: -${KEY_WIDTH / 2}px;\r\n  top: 0;\r\n`;\r\n\r\nexport const SkipKey = styled.div`\r\n  width: ${KEY_WIDTH}px;\r\n  height: 60px;\r\n  background: transparent;\r\n  display: inline-block;\r\n  margin: 1px;\r\n`;\r\n\r\nexport const KeyButton = styled.div`\r\n  display: inline-block;\r\n  width: ${KEY_WIDTH}px;\r\n  \r\n  height: ${({black}) => black ? KEY_HEIGHT / 5 * 3 : KEY_HEIGHT}px;\r\n  border: ${({black}) => black ? \"#B83373\" : \"#A46912\"} 1px solid;\r\n  background-color: #000;\r\n  color: #000;\r\n  margin: 1px;\r\n  transition: background-color .2s;\r\n\r\n&.active {\r\n  background-color: ${({black}) => black ? \"#B83373\" : \"#A46912\"};\r\n}\r\n`;","import React, { useContext } from \"react\";\r\nimport { SynthContext } from \"./utils\";\r\nimport { KeyButton } from \"./Styles\";\r\n\r\nconst NoteKey = ({note, black = false}) => {\r\n  const {activeNote, onAttack, onRelease} = useContext(SynthContext);\r\n  const onMouseEnter = () => {\r\n    if (activeNote !== null) {\r\n      onAttack(note);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <KeyButton\r\n      black={black}\r\n      className={activeNote === note ? \"active\" : \"\"}\r\n      onMouseDown={() => onAttack(note)}\r\n      onMouseEnter={onMouseEnter}\r\n      onMouseUp={() => onRelease()}\r\n    />\r\n  )\r\n}\r\n\r\nexport default NoteKey;","import React from 'react';\r\nimport { whiteNotes, blackNotes, useKeyboardShortcuts } from \"./utils\";\r\nimport {\r\n  KeyboardWrapper,\r\n  KeyboardWhites,\r\n  KeyboardBlacks,\r\n  SkipKey\r\n} from \"./Styles\";\r\nimport NoteKey from \"./NoteKey\";\r\n\r\nconst OctaveKeys = ({octave, keyboardShortcuts = false}) => {\r\n  useKeyboardShortcuts(octave, keyboardShortcuts);\r\n  \r\n  return (\r\n    <KeyboardWrapper>\r\n      <KeyboardWhites>\r\n        {whiteNotes.map(note => (\r\n          <NoteKey\r\n            key={note + octave}\r\n            note={note + octave}\r\n          />\r\n        ))}\r\n      </KeyboardWhites>\r\n\r\n      <KeyboardBlacks>\r\n        {blackNotes.map((note, idx) =>\r\n          note === null ? (\r\n            <SkipKey key={`skip-${idx}-${octave}`} />\r\n          ) : (\r\n            <NoteKey\r\n              key={note + octave}\r\n              note={note + octave}\r\n              black\r\n            />\r\n          )\r\n        )}\r\n      </KeyboardBlacks>\r\n    </KeyboardWrapper>\r\n  )\r\n};\r\n\r\nexport default OctaveKeys;","import React from \"react\";\r\n\r\nimport { SynthContext } from \"./utils\";\r\nimport OctaveKeys from \"./OctaveKeys\";\r\nimport { KeyboardWrapper } from \"./Styles\";\r\n\r\nconst SynthKeyboard = ({ synth }) => {\r\n  const [activeNote, setActiveNote] = React.useState(null);\r\n\r\n  const onAttack = note => {\r\n    setActiveNote(note);\r\n    synth.triggerAttack(note);\r\n  };\r\n\r\n  const onRelease = () => {\r\n    synth.triggerRelease();\r\n    setActiveNote(null);\r\n  };\r\n\r\n  return (\r\n    <SynthContext.Provider value={{ activeNote, onAttack, onRelease, synth }}>\r\n      <KeyboardWrapper>\r\n        <OctaveKeys octave={4} keyboardShortcuts/>\r\n        <OctaveKeys octave={5}/>\r\n      </KeyboardWrapper>\r\n    </SynthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SynthKeyboard;\r\n","import React from \"react\";\r\nimport P5Wrapper from \"react-p5-wrapper\";\r\n\r\nconst sketch = (toneWaveform, width) => {\r\n  const height = 200;\r\n  return (p) => {\r\n    p.setup = function () {\r\n      p.createCanvas(width, height);\r\n      p.noFill();\r\n      p.background(0); // alpha\r\n    }\r\n\r\n    p.draw = function() {\r\n      p.background(0, 0, 0, 100); // alpha\r\n\r\n      // analyze the waveform\r\n      const waveformValues = toneWaveform.getValue();\r\n      p.stroke(\"#B83373\");\r\n      p.strokeWeight(2);\r\n      p.beginShape();\r\n      for (let i = 0; i < waveformValues.length; i++) {\r\n        let x = p.map(i, 0, waveformValues.length, 0, width);\r\n        let y = p.map(waveformValues[i], -1, 1, -height, height);\r\n        p.vertex(x, y + height / 2);\r\n      }\r\n      p.endShape();\r\n    }\r\n  }\r\n}\r\n\r\nconst SynthWave = ({ waveform }) => {\r\n  const width = window.innerWidth;\r\n  return <P5Wrapper sketch={sketch(waveform, width)} />;\r\n};\r\n\r\nexport default SynthWave;","import React from 'react';\nimport './App.css';\nimport SynthKeyboard from './components/keyboard/SynthKeyboard';\nimport Tone from 'tone';\nimport SynthWave from './components/visualizer/SynthWave';\n\n\nconst waveform = new Tone.Waveform();\nvar phaser = new Tone.Phaser({\n\t\"frequency\" : 5,\n\t\"octaves\" : 5,\n\t\"baseFrequency\" : 1000\n}).chain(waveform, Tone.Master);\nconst synth = new Tone.FMSynth().connect(waveform, phaser);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SynthWave waveform={waveform}/>\n      <SynthKeyboard synth={synth} octave=\"4\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}